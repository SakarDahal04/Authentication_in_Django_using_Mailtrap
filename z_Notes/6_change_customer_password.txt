When we click on change password button, we will be redirected to the password change page. 
There will be a form where old password and new password with confirm password is to be entered.

------------------------------------------------------------------------------------------------------------

There is one default form that django uses called ""PasswordChangeForm""
    We can create that form so we don't have to create our own form for changing the password.

    At first we import that form
        from django.contrib.auth.forms import PasswordChangeForm

    This form will expect three fields:
        - old_password
        - new_password1
        - new_password2

    So that if we define the form ourselves, there must be the fields with name as above

------------------------------------------------------------------------------------------------------------

When the logout page is load i.e the method is not POST, then simple for is created and the page is rendered

But when we enter the data and then send the request, we pass the user and the request information to the form

        form = PasswordChangeForm(user=request.user, data=request.POST)
    
    If the form is valid, then save the form and logout the user

        logout(user)

    After that redirect the user back to login

------------------------------------------------------------------------------------------------------------

The problem that we can see in here is that, if we access the certain url from the browser, even if the user is not logged in, other will be able to access those urls.

This should not happen. To prevent this we are provided with the decorator named login_required

    from django.contrib.auth.decorators import login_required

    Then we add these decorators above the function

    @login_required
    def password_change_view(req):
        ...


------------------------------------------------------------------------------------------------------------

After putting the decorator above the functions, it will send us back to the page with the URL

        /account/login

    It is because this is the URL that is set up by the @login_required

    But we want it to redirect back to the URL with the path
        /login

        because this is the one that we configured

    For configuring this we go to the settings and set LOGIN_URL

        LOGIN_URL = 'login'

This tells if the user is trying to go to the page he is not allowed to then redirect that user to above path.
That means that if you are trying to access pages where the login is required then it will redirect to this page
------------------------------------------------------------------------------------------------------------

If we want to see validation from the form, then we can send
    {'form': form} 
    at the end of the render function

    In this way even if we are not using the fields, we will be able to see the errors that we will get if the fields with certain name is not obtained in the post request.

    So both of the errors from the form and the views that we configured will be shown.
    We can keep whatever we like
------------------------------------------------------------------------------------------------------------

